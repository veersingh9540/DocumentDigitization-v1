name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_type:
        description: 'Deployment Type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - hotfix
          - rollback

env:
  # Global environment variables can be set here
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 black
          pip install -r requirements.txt

      - name: Python Linting
        run: |
          pylint **/*.py || true
          flake8 .
          black --check .

      - name: Install Node.js Dependencies
        run: |
          cd src/dashboard
          npm ci
          npm run lint || true

  unit-tests:
    name: Unit Tests
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Python Test Setup
        run: |
          pip install pytest
          pip install -r requirements.txt

      - name: Run Python Unit Tests
        run: |
          pytest tests/ || true

      - name: Run Frontend Tests
        run: |
          cd src/dashboard
          npm test || true

  build:
    name: Build Artifacts
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Frontend
        run: |
          cd src/dashboard
          npm ci
          npm run build

      - name: Build Lambda Functions
        run: |
          mkdir -p build/lambda
          cd src/lambda
          for dir in */; do
            if [ -f "$dir/requirements.txt" ]; then
              function_name=$(basename "$dir")
              cd "$dir"
              pip install -r requirements.txt -t .
              zip -r "../../../build/lambda/${function_name}.zip" .
              cd ..
            fi
          done

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/lambda/*.zip
            src/dashboard/build/

  infrastructure-validation:
    name: Infrastructure Validation
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check
          terraform init
          terraform validate

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: infrastructure-validation
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init & Workspace
        run: |
          cd terraform
          terraform init
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }} || terraform workspace new ${{ github.event.inputs.environment || 'dev' }}

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  deploy-lambdas:
    name: Deploy Lambda Functions
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Deploy Lambda Functions
        run: |
          for lambda_zip in build/lambda/*.zip; do
            function_name=$(basename "$lambda_zip" .zip)
            aws lambda update-function-code \
              --function-name "$function_name" \
              --zip-file "fileb://$lambda_zip"
          done

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-lambdas
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Deploy to S3
        run: |
          aws s3 sync build/dashboard s3://${{ secrets.S3_BUCKET }} --delete

  post-deployment-tests:
    name: Post-Deployment Tests
    needs: deploy-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Run Integration Tests
        run: |
          # Add integration test commands here
          echo "Running post-deployment integration tests"

  notify:
    name: Deployment Notification
    needs: 
      - post-deployment-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  cleanup:
    name: Cleanup
    needs: notify
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: build-artifacts
          failOnError: false
