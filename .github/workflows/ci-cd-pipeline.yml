name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_tests:
        description: 'Skip tests phase'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: 'Test'
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    env:
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f src/lambda/document_processor/requirements.txt ]; then pip install -r src/lambda/document_processor/requirements.txt; fi
          if [ -f src/lambda/dashboard_api/requirements.txt ]; then pip install -r src/lambda/dashboard_api/requirements.txt; fi
      
      - name: Run linting
        run: |
          # Lint Python files
          find src -name "*.py" | xargs pylint --disable=C0111,C0103,C0303,C0301,W0613,R0903,R0913,R0914 || true
      
      - name: Run unit tests
        run: |
          pytest tests/
  
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() || github.event.inputs.skip_tests == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f src/lambda/document_processor/requirements.txt ]; then pip install -r src/lambda/document_processor/requirements.txt; fi
          if [ -f src/lambda/dashboard_api/requirements.txt ]; then pip install -r src/lambda/dashboard_api/requirements.txt; fi
      
      - name: Package Lambda functions
        run: |
          mkdir -p build
          
          # Create document_processor.zip
          cd src/lambda/document_processor
          zip -r ../../../build/document_processor.zip .
          cd ../../..
          
          # Create dashboard_api.zip
          cd src/lambda/dashboard_api
          zip -r ../../../build/dashboard_api.zip .
          cd ../../..
      
      - name: Build dashboard frontend
        run: |
          cd src/dashboard
          npm install
          npm run build
      
      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            build/document_processor.zip
            build/dashboard_api.zip
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-frontend
          path: src/dashboard/build/
  
  deploy-infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init
      
      - name: Select Terraform Workspace
        run: |
          cd infrastructure/terraform
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT
      
      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -out=tfplan
      
      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan
      
      - name: Extract Terraform Outputs
        id: terraform-outputs
        run: |
          cd infrastructure/terraform
          EC2_IP=$(terraform output -raw ec2_instance_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "EC2 IP is: $EC2_IP" 
          echo "S3_BUCKET=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "API_URL=$(terraform output -raw api_gateway_url)" >> $GITHUB_ENV
          echo "EC2_IP=$(terraform output -raw ec2_instance_public_ip)" >> $GITHUB_ENV
      - name: Set outputs
        id: set-outputs
        run: |
          cd infrastructure/terraform
          echo "::set-output name=ec2_ip::$(terraform output -raw ec2_instance_public_ip)"

  
  deploy-lambda:
    name: 'Deploy Lambda Functions'
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: ./lambda-packages
      
      - name: Update Lambda Functions
        run: |
          aws lambda update-function-code \
            --function-name document-processing-document-processor-dev \
            --zip-file fileb://lambda-packages/document_processor.zip
          
          aws lambda update-function-code \
            --function-name document-processing-dashboard-api-dev \
            --zip-file fileb://lambda-packages/dashboard_api.zip
  
  deploy-frontend:
    name: 'Deploy Frontend'
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-lambda]
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
      EC2_IP: ${{needs.deploy-infrastructure.outputs.ec2_ip}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: dashboard-frontend
          path: ./dashboard-build
      
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        shell: /usr/bin/bash -e {0}
      
      - name: Upload frontend to EC2
        run: |
          scp -r ./dashboard-build/* ec2-user@${{ env.EC2_IP }}:/var/www/html/
      
      - name: Restart Nginx
        run: |
          ssh ec2-user@${{ env.EC2_IP }} 'sudo systemctl restart nginx'
  
  finalize:
    name: 'Finalize Deployment'
    runs-on: ubuntu-latest
    needs: deploy-frontend
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Summarize deployment
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Deployment Status**: âœ… Successful" >> $GITHUB_STEP_SUMMARY
          echo "* **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Details" >> $GITHUB_STEP_SUMMARY
          echo "* **Dashboard URL**: http://${{ env.EC2_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **API URL**: ${{ env.API_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "* **S3 Bucket**: ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
