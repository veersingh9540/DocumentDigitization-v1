name: Deploy Document Processing Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/lambda/document_processor/requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest tests/ --cov=src
  
  terraform-plan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan
  
  deploy:
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 3600
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: terraform
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
      - name: Package Lambda Functions
        run: |
          cd src/lambda/document_processor
          pip install -r requirements.txt -t .
          zip -r ../../../document_processor.zip .
          
          cd ../dashboard_api
          pip install -r requirements.txt -t .
          zip -r ../../../dashboard_api.zip .
          
      - name: Deploy Lambda Functions
        run: |
          aws lambda update-function-code \
            --function-name document-processor \
            --zip-file fileb://document_processor.zip
            
          aws lambda update-function-code \
            --function-name dashboard-api \
            --zip-file fileb://dashboard_api.zip
            
      - name: Deploy Dashboard App
        run: |
          S3_BUCKET=$(aws cloudformation describe-stacks --stack-name document-processing-stack --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
          aws s3 cp src/dashboard s3://$S3_BUCKET/app/ --recursive
          
          EC2_IP=$(aws cloudformation describe-stacks --stack-name document-processing-stack --query "Stacks[0].Outputs[?OutputKey=='EC2InstancePublicIP'].OutputValue" --output text)
          
          # Wait for EC2 instance to be ready
          echo "Waiting for EC2 instance to be ready..."
          sleep 60
          
          # Deploy dashboard app to EC2
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_IP "aws s3 cp s3://$S3_BUCKET/app/ /app/ --recursive"
