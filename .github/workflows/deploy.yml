name: Deploy Document Processing Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f src/lambda/document_processor/requirements.txt ]; then pip install -r src/lambda/document_processor/requirements.txt; fi
          if [ -f src/lambda/dashboard_api/requirements.txt ]; then pip install -r src/lambda/dashboard_api/requirements.txt; fi
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          if [ -d tests ]; then pytest tests/ --cov=src; fi
  
  terraform-plan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
        
      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check || echo "Warning: Terraform files are not formatted."
        
      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform validate -no-color
          
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -no-color -out=tfplan
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan
  
  deploy:
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
        
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: terraform
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "DOCUMENT_PROCESSOR_FUNCTION=$(terraform output -raw lambda_document_processor_name)" >> $GITHUB_ENV
          echo "DASHBOARD_API_FUNCTION=$(terraform output -raw lambda_dashboard_api_name)" >> $GITHUB_ENV
          echo "S3_BUCKET=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "EC2_IP=$(terraform output -raw ec2_instance_public_ip)" >> $GITHUB_ENV
          
      - name: Package Lambda Functions
        run: |
          bash scripts/package_lambdas.sh
          
      - name: Deploy Lambda Functions
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.DOCUMENT_PROCESSOR_FUNCTION }} \
            --zip-file fileb://document_processor.zip
            
          aws lambda update-function-code \
            --function-name ${{ env.DASHBOARD_API_FUNCTION }} \
            --zip-file fileb://dashboard_api.zip
            
      - name: Deploy Dashboard App
        run: |
          aws s3 cp src/dashboard s3://${{ env.S3_BUCKET }}/app/ --recursive
